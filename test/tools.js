require('jquery/src/jquery');

var exports = module.exports = {};

exports.firstTest = 1;
exports.lastTest = 0;

exports.initBrowser = function(myConfigService) {
  return new Promise(function(resolve, reject) {
    var adminRef, webcomAppName, datasyncUri;
    var isFirefox = typeof InstallTrigger !== 'undefined';
    var isChrome = !!window.chrome && !!window.chrome.webstore;
    adminRef = new Webcom(myConfigService.datasyncAdminUri);
    if (isChrome) {
      console.log("---- CHROME ----");
      webcomAppName = myConfigService.WebcomAppName + '-chrome';
      datasyncUri = myConfigService.datasyncUri + '-chrome';
      myConfigService.WebcomAppName = webcomAppName;
      myConfigService.datasyncUri = datasyncUri;
      resolve({
        adminRef,
        webcomAppName,
        datasyncUri
      });
    } else if (isFirefox) {
      console.log("---- FIREFOX ----");
      webcomAppName = myConfigService.WebcomAppName + '-firefox';
      datasyncUri = myConfigService.datasyncUri + '-firefox';
      myConfigService.WebcomAppName = webcomAppName;
      myConfigService.datasyncUri = datasyncUri;
      resolve({
        adminRef,
        webcomAppName,
        datasyncUri
      });
    } else {
      reject("BROWSER_NOT_DEFINED");
    }
  });
}
exports.logout = function(ref) {
  return new Promise(function(resolve, reject) {
    ref.logout(function(error) {
      if (error) {
        console.log("an error occurred");
        reject(error);
      } else {
        resolve();
        console.log("Disconnection performed");
      }
    });
  })
};

exports.createSpace = function(usersRef, spacesRef, userId, spaceName) {

  return new Promise(function(resolve, reject) {
    var pushError = undefined;
    var setError = undefined;
    var selectedSpaceID = undefined;
    var userRef = usersRef.child(userId);
    var space = {
      settings: {
        name: spaceName,
        users: {},
        adminIndex: {}
      }
    };
    space.settings.users[userId] = {
      role: "admin"
    }
    space.settings.adminIndex = {
      [userId]: true
    }

    // Creation of the space with the ID generated by push()
    var spacePush = spacesRef.push(space, function(error) {
      if (error) {
        pushError = error;
        reject(pushError);
      } else {
        pushError = null;

        // Recuperate the space ID generated by push()
        selectedSpaceID = spacePush.name();
        spacesRef.child(selectedSpaceID).child("settings").update({
          id: spacePush.name()
        }, function(setSpaceIdError) {
          if (setSpaceIdError) {
            setError = setSpaceIdError;
          } else {
            setError = null;
          }

          if (pushError === null && setError === null) {
            userRef.child("spaces").child(selectedSpaceID).set({
              exist: "true",
            }, function(error) {
              if (error) {
                setError = error;
              } else {
                setError = null;
              }

              if (pushError === null && setError === null) {
                resolve(selectedSpaceID);
              } else {
                if (pushError !== null) {
                  reject(pushError);
                } else if (setError !== null) {
                  reject(setError);
                }
              }
            });
          } else {
            if (pushError !== null) {
              reject(pushError);
            } else if (setError !== null) {
              spacesRef.child(spacePush.name()).remove(function() {
                reject(setError);
              });
            }
          }
        });
      }
    });
  });
}

/** Set user data function **/
exports.setUserData = function(usersRef, name, surname, providerUid, preferredLanguage, userId) {
  var userRef = usersRef.child(userId);
  name = name.charAt(0).toUpperCase() + name.substr(1).toLowerCase();
  surname = surname.toUpperCase();

  return new Promise(function(resolve, reject) {
    userRef.update({
      "name": name,
      "surname": surname,
      "email": providerUid,
      "prefLang": preferredLanguage
    }, function(error) {
      if (error) {
        reject(error);
      } else {
        resolve(null);
      }
    });
  });
}

exports.readUserData = function(usersRef, userId) {
  return new Promise(function(resolve, reject) {
    usersRef.child(userId).once("value", function(snapshot) {
      resolve(null);
    }, function(error) {
      reject(error);
    });
  });
}

exports.createWebcomApplication = function(testNsNameParam, token) {
  return new Promise(function(resolve, reject) {
    console.log("createWebcomApplication");
    $.post('https://io.datasync.orange.com/admin/base/' + testNsNameParam, {
      token: token
    }).done(function(data) {
      resolve(data);
    }).fail(function(resp) {
      reject(resp);
    });
  });

}

exports.adminLogin = function(ref) {
  return new Promise(function(resolve, reject) {
    const adminCredentials = {
      // Change admin credentials !!!!!!
      email: "developper.email@example.com",
      password: "password"
    };
    ref.authWithPassword(adminCredentials).then(function(auth) {
      resolve(auth.webcomAuthToken);
    }).catch(function(error) {
      reject(error);
    });
  });
};

exports.deleteWebcomApplication = function(testNsNameParam, token) {

  return new Promise(function(resolve, reject) {
    $.post('https://io.datasync.orange.com/admin/base/' + testNsNameParam, {
      token: token,
      _method: "DELETE",
      namespace: testNsNameParam
    }).done(function(data) {
      console.log("deleteWebcomApplication");
      resolve(data);
    }).fail(function(resp) {
      reject(resp);
    });
  });
}

exports.setWebcomApplicationConfig = function(testNsNameParam, token) {

  return new Promise(function(resolve, reject) {
    var nsConfig;

    $.get('https://io.datasync.orange.com/base/' + testNsNameParam + '/.settings/authConfig.json?auth=' + token).done(function(data) {
      nsConfig = JSON.parse(data);
      nsConfig.password = {
        enabled: true
      };
      $.put('https://io.datasync.orange.com/base/' + testNsNameParam + '/.settings/authConfig.json?auth=' + token, JSON.stringify(nsConfig), function(success) {
        resolve();
      }, function(jq, error, errorThrown) {
        console.log(error);
        reject();
      })
    }).fail(function(resp) {
      reject(resp);
    });
  });
}

exports.setWebcomApplicationRulesConfig = function(testNsNameParam, token, rules) {

  return new Promise(function(resolve, reject) {
    var nsConfig;

    $.get('https://io.datasync.orange.com/base/' + testNsNameParam + '/.settings/rules.json?auth=' + token).done(function(data) {
      nsConfig = JSON.parse(data);
      nsConfig.rules = rules;
      $.put('https://io.datasync.orange.com/base/' + testNsNameParam + '/.settings/rules.json?auth=' + token, JSON.stringify(nsConfig), function(success) {
        resolve();
      }, function(jq, error, errorThrown) {
        console.log(error);
        reject();
      })
    }).fail(function(resp) {
      reject(resp);
    });
  });
}

exports.getAdminToken = function(testNsNameParam, token, done) {
  return new Promise(function(resolve, reject) {

    $.get('https://io.datasync.orange.com/admin/base/' + testNsNameParam + '/token', {
      token: token
    }).done(function(data) {
      resolve(data.authToken);
    }).fail(function(resp) {
      reject(resp);
    });
  });
}

exports.createUser = function(testNsNameParam, appAdminToken, email, password) {
  return new Promise(function(resolve, reject) {
    var createConfirmedUrl = 'https://io.datasync.orange.com/admin/base/' + testNsNameParam + '/createConfirmedUser?' +
      $.param({
        email: email,
        auth: appAdminToken
      });
    $.post(createConfirmedUrl, {
      "password": password
    }).done(function(data) {
      resolve(data);
    }).fail(function(resp) {
      reject(resp);
    });
  });
};

exports.resetNameSpace = function(testNsNameParam, token) {
  return new Promise(function(resolve, reject) {

    $.delete_('https://io.datasync.orange.com/base/' + testNsNameParam + '.json?auth=' + token, function(success) {
      console.log("reset NameSpace success");
      resolve();
    }, function(jq, error, errorThrown) {
      console.log(error);
      reject();
    })

  });
}
exports.createIdObject = function(id) {
  this.id = id;
}

function _ajax_request(url, data, callback, errorCallback, type, method) {
  if (jQuery.isFunction(data)) {
    callback = data;
    data = {};
  }
  return jQuery.ajax({
    type: method,
    url: url,
    data: data,
    success: callback,
    dataType: type,
    error: errorCallback,
    contentType: "application/json"
  });
}

jQuery.extend({
  put: function(url, data, callback, errorCallback) {
    return _ajax_request(url, data, callback, errorCallback, 'json', 'PUT');
  },
  delete_: function(url, callback, errorCallback, type) {
    return _ajax_request(url, "null", callback, errorCallback, type, 'DELETE');
  }
});
